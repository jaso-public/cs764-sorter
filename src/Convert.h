#ifndef CONVERT_H
#define CONVERT_H

#include <charconv>
#include <cstring>
#include <iostream>
#include <sstream>
#include <type_traits> // For std::is_integral

/*
 * This class is utilized to parse the user input flags (such as -s) from the user's commands to generate and sort records
 */

/**
 * This method will parse and set the integer values from the user input command
 * @tparam IntegerType the type of integer that is being parsed
 * @param str the user input that is being parsed
 * @param outValue the value that is being set
 * @return a true or false value indicating the parsings success
 */

// generated by my good friend, ChatGpt
template<typename IntegerType, typename std::enable_if<std::is_integral<IntegerType>::value, bool>::type = true>
bool parseInteger(const char* str, IntegerType& outValue) {
    std::from_chars_result result = std::from_chars(str, str + std::strlen(str), outValue);

    if (result.ec == std::errc::invalid_argument) {
        std::cerr << "Error: Invalid argument." << std::endl;
        return false;
    } else if (result.ec == std::errc::result_out_of_range) {
        std::cerr << "Error: Result out of range." << std::endl;
        return false;
    } else if (result.ptr != str + std::strlen(str)) {
        // Not all characters were consumed, indicating some invalid input.
        std::cerr << "Error: Entire string not converted." << std::endl;
        return false;
    }

    // Success
    return true;
}

/**
 * This method will parse and set a floating point value from the user's input command
 * @tparam T the type of floating point that is being parsed
 * @param str the user input that is being parsed
 * @param value the value to set after being parsed
 * @return a true or false value, indicating success or fail
 */
template<typename T>
bool parseFloatingPoint(const std::string& str, T& value) {
    static_assert(std::is_floating_point<T>::value, "T must be a floating point type");

    std::istringstream iss(str);
    iss >> value;

    // Check if the entire string was consumed and if the read was successful
    return iss.eof() && !iss.fail();
}

#endif // CONVERT_H